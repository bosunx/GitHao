// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'repo_entity.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

RepoEntity _$RepoEntityFromJson(Map<String, dynamic> json) {
  return RepoEntity(
    json['id'] as int?,
    json['node_id'] as String?,
    json['name'] as String?,
    json['full_name'] as String?,
    json['owner'] == null
        ? null
        : RepoOwner.fromJson(json['owner'] as Map<String, dynamic>),
    json['private'] as bool?,
    json['html_url'] as String?,
    json['description'] as String?,
    json['fork'] as bool?,
    json['url'] as String?,
    json['archive_url'] as String?,
    json['assignees_url'] as String?,
    json['blobs_url'] as String?,
    json['branches_url'] as String?,
    json['collaborators_url'] as String?,
    json['comments_url'] as String?,
    json['commits_url'] as String?,
    json['compare_url'] as String?,
    json['contents_url'] as String?,
    json['contributors_url'] as String?,
    json['deployments_url'] as String?,
    json['downloads_url'] as String?,
    json['events_url'] as String?,
    json['forks_url'] as String?,
    json['git_commits_url'] as String?,
    json['git_refs_url'] as String?,
    json['git_tags_url'] as String?,
    json['git_url'] as String?,
    json['issue_comment_url'] as String?,
    json['issue_events_url'] as String?,
    json['issues_url'] as String?,
    json['keys_url'] as String?,
    json['labels_url'] as String?,
    json['languages_url'] as String?,
    json['merges_url'] as String?,
    json['milestones_url'] as String?,
    json['notifications_url'] as String?,
    json['pulls_url'] as String?,
    json['releases_url'] as String?,
    json['ssh_url'] as String?,
    json['stargazers_url'] as String?,
    json['statuses_url'] as String?,
    json['subscribers_url'] as String?,
    json['subscription_url'] as String?,
    json['tags_url'] as String?,
    json['teams_url'] as String?,
    json['trees_url'] as String?,
    json['clone_url'] as String?,
    json['mirror_url'] as String?,
    json['hooks_url'] as String?,
    json['svn_url'] as String?,
    json['homepage'] as String?,
    json['language'] as String?,
    json['forks_count'] as int?,
    json['forks'] as int?,
    json['stargazers_count'] as int?,
    json['watchers_count'] as int?,
    json['watchers'] as int?,
    json['size'] as int?,
    json['default_branch'] as String?,
    json['open_issues_count'] as int?,
    json['open_issues'] as int?,
    json['is_template'] as bool?,
    (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
    json['has_issues'] as bool?,
    json['has_projects'] as bool?,
    json['has_wiki'] as bool?,
    json['has_pages'] as bool?,
    json['has_downloads'] as bool?,
    json['archived'] as bool?,
    json['disabled'] as bool?,
    json['visibility'] as String?,
    json['pushed_at'] as String?,
    json['created_at'] as String?,
    json['updated_at'] as String?,
    json['permissions'] == null
        ? null
        : RepoPermissions.fromJson(json['permissions'] as Map<String, dynamic>),
    json['allow_rebase_merge'] as bool?,
    json['template_repository'] == null
        ? null
        : RepoTemplateRepository.fromJson(
            json['template_repository'] as Map<String, dynamic>),
    json['temp_clone_token'] as String?,
    json['allow_squash_merge'] as bool?,
    json['allow_auto_merge'] as bool?,
    json['delete_branch_on_merge'] as bool?,
    json['allow_merge_commit'] as bool?,
    json['subscribers_count'] as int?,
    json['network_count'] as int?,
    json['license'] == null
        ? null
        : RepoLicense.fromJson(json['license'] as Map<String, dynamic>),
    json['organization'] == null
        ? null
        : RepoOrganization.fromJson(
            json['organization'] as Map<String, dynamic>),
    json['parent'] == null
        ? null
        : RepoParent.fromJson(json['parent'] as Map<String, dynamic>),
    json['source'] == null
        ? null
        : RepoSource.fromJson(json['source'] as Map<String, dynamic>),
  );
}

Map<String, dynamic> _$RepoEntityToJson(RepoEntity instance) =>
    <String, dynamic>{
      'id': instance.id,
      'node_id': instance.nodeId,
      'name': instance.name,
      'full_name': instance.fullName,
      'owner': instance.owner?.toJson(),
      'private': instance.private,
      'html_url': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'archive_url': instance.archiveUrl,
      'assignees_url': instance.assigneesUrl,
      'blobs_url': instance.blobsUrl,
      'branches_url': instance.branchesUrl,
      'collaborators_url': instance.collaboratorsUrl,
      'comments_url': instance.commentsUrl,
      'commits_url': instance.commitsUrl,
      'compare_url': instance.compareUrl,
      'contents_url': instance.contentsUrl,
      'contributors_url': instance.contributorsUrl,
      'deployments_url': instance.deploymentsUrl,
      'downloads_url': instance.downloadsUrl,
      'events_url': instance.eventsUrl,
      'forks_url': instance.forksUrl,
      'git_commits_url': instance.gitCommitsUrl,
      'git_refs_url': instance.gitRefsUrl,
      'git_tags_url': instance.gitTagsUrl,
      'git_url': instance.gitUrl,
      'issue_comment_url': instance.issueCommentUrl,
      'issue_events_url': instance.issueEventsUrl,
      'issues_url': instance.issuesUrl,
      'keys_url': instance.keysUrl,
      'labels_url': instance.labelsUrl,
      'languages_url': instance.languagesUrl,
      'merges_url': instance.mergesUrl,
      'milestones_url': instance.milestonesUrl,
      'notifications_url': instance.notificationsUrl,
      'pulls_url': instance.pullsUrl,
      'releases_url': instance.releasesUrl,
      'ssh_url': instance.sshUrl,
      'stargazers_url': instance.stargazersUrl,
      'statuses_url': instance.statusesUrl,
      'subscribers_url': instance.subscribersUrl,
      'subscription_url': instance.subscriptionUrl,
      'tags_url': instance.tagsUrl,
      'teams_url': instance.teamsUrl,
      'trees_url': instance.treesUrl,
      'clone_url': instance.cloneUrl,
      'mirror_url': instance.mirrorUrl,
      'hooks_url': instance.hooksUrl,
      'svn_url': instance.svnUrl,
      'homepage': instance.homepage,
      'language': instance.language,
      'forks_count': instance.forksCount,
      'forks': instance.forks,
      'stargazers_count': instance.stargazersCount,
      'watchers_count': instance.watchersCount,
      'watchers': instance.watchers,
      'size': instance.size,
      'default_branch': instance.defaultBranch,
      'open_issues_count': instance.openIssuesCount,
      'open_issues': instance.openIssues,
      'is_template': instance.isTemplate,
      'topics': instance.topics,
      'has_issues': instance.hasIssues,
      'has_projects': instance.hasProjects,
      'has_wiki': instance.hasWiki,
      'has_pages': instance.hasPages,
      'has_downloads': instance.hasDownloads,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'visibility': instance.visibility,
      'pushed_at': instance.pushedAt,
      'created_at': instance.createdAt,
      'updated_at': instance.updatedAt,
      'permissions': instance.permissions?.toJson(),
      'allow_rebase_merge': instance.allowRebaseMerge,
      'template_repository': instance.templateRepository?.toJson(),
      'temp_clone_token': instance.tempCloneToken,
      'allow_squash_merge': instance.allowSquashMerge,
      'allow_auto_merge': instance.allowAutoMerge,
      'delete_branch_on_merge': instance.deleteBranchOnMerge,
      'allow_merge_commit': instance.allowMergeCommit,
      'subscribers_count': instance.subscribersCount,
      'network_count': instance.networkCount,
      'license': instance.license?.toJson(),
      'organization': instance.organization?.toJson(),
      'parent': instance.parent?.toJson(),
      'source': instance.source?.toJson(),
    };

RepoOwner _$RepoOwnerFromJson(Map<String, dynamic> json) {
  return RepoOwner(
    json['login'] as String?,
    json['id'] as int?,
    json['node_id'] as String?,
    json['avatar_url'] as String?,
    json['gravatar_id'] as String?,
    json['url'] as String?,
    json['html_url'] as String?,
    json['followers_url'] as String?,
    json['following_url'] as String?,
    json['gists_url'] as String?,
    json['starred_url'] as String?,
    json['subscriptions_url'] as String?,
    json['organizations_url'] as String?,
    json['repos_url'] as String?,
    json['events_url'] as String?,
    json['received_events_url'] as String?,
    json['type'] as String?,
    json['site_admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoOwnerToJson(RepoOwner instance) => <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'node_id': instance.nodeId,
      'avatar_url': instance.avatarUrl,
      'gravatar_id': instance.gravatarId,
      'url': instance.url,
      'html_url': instance.htmlUrl,
      'followers_url': instance.followersUrl,
      'following_url': instance.followingUrl,
      'gists_url': instance.gistsUrl,
      'starred_url': instance.starredUrl,
      'subscriptions_url': instance.subscriptionsUrl,
      'organizations_url': instance.organizationsUrl,
      'repos_url': instance.reposUrl,
      'events_url': instance.eventsUrl,
      'received_events_url': instance.receivedEventsUrl,
      'type': instance.type,
      'site_admin': instance.siteAdmin,
    };

RepoPermissions _$RepoPermissionsFromJson(Map<String, dynamic> json) {
  return RepoPermissions(
    json['pull'] as bool?,
    json['push'] as bool?,
    json['admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoPermissionsToJson(RepoPermissions instance) =>
    <String, dynamic>{
      'pull': instance.pull,
      'push': instance.push,
      'admin': instance.admin,
    };

RepoTemplateRepository _$RepoTemplateRepositoryFromJson(
    Map<String, dynamic> json) {
  return RepoTemplateRepository(
    json['id'] as int?,
    json['node_id'] as String?,
    json['name'] as String?,
    json['full_name'] as String?,
    json['owner'] == null
        ? null
        : RepoTemplateRepositoryOwner.fromJson(
            json['owner'] as Map<String, dynamic>),
    json['private'] as bool?,
    json['html_url'] as String?,
    json['description'] as String?,
    json['fork'] as bool?,
    json['url'] as String?,
    json['archive_url'] as String?,
    json['assignees_url'] as String?,
    json['blobs_url'] as String?,
    json['branches_url'] as String?,
    json['collaborators_url'] as String?,
    json['comments_url'] as String?,
    json['commits_url'] as String?,
    json['compare_url'] as String?,
    json['contents_url'] as String?,
    json['contributors_url'] as String?,
    json['deployments_url'] as String?,
    json['downloads_url'] as String?,
    json['events_url'] as String?,
    json['forks_url'] as String?,
    json['git_commits_url'] as String?,
    json['git_refs_url'] as String?,
    json['git_tags_url'] as String?,
    json['git_url'] as String?,
    json['issue_comment_url'] as String?,
    json['issue_events_url'] as String?,
    json['issues_url'] as String?,
    json['keys_url'] as String?,
    json['labels_url'] as String?,
    json['languages_url'] as String?,
    json['merges_url'] as String?,
    json['milestones_url'] as String?,
    json['notifications_url'] as String?,
    json['pulls_url'] as String?,
    json['releases_url'] as String?,
    json['ssh_url'] as String?,
    json['stargazers_url'] as String?,
    json['statuses_url'] as String?,
    json['subscribers_url'] as String?,
    json['subscription_url'] as String?,
    json['tags_url'] as String?,
    json['teams_url'] as String?,
    json['trees_url'] as String?,
    json['clone_url'] as String?,
    json['mirror_url'] as String?,
    json['hooks_url'] as String?,
    json['svn_url'] as String?,
    json['homepage'] as String?,
    json['language'] as String?,
    json['forks'] as int?,
    json['forks_count'] as int?,
    json['stargazers_count'] as int?,
    json['watchers_count'] as int?,
    json['watchers'] as int?,
    json['size'] as int?,
    json['default_branch'] as String?,
    json['open_issues'] as int?,
    json['open_issues_count'] as int?,
    json['is_template'] as bool?,
    json['license'] == null
        ? null
        : RepoTemplateRepositoryLicense.fromJson(
            json['license'] as Map<String, dynamic>),
    (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
    json['has_issues'] as bool?,
    json['has_projects'] as bool?,
    json['has_wiki'] as bool?,
    json['has_pages'] as bool?,
    json['has_downloads'] as bool?,
    json['archived'] as bool?,
    json['disabled'] as bool?,
    json['visibility'] as String?,
    json['pushed_at'] as String?,
    json['created_at'] as String?,
    json['updated_at'] as String?,
    json['permissions'] == null
        ? null
        : RepoTemplateRepositoryPermissions.fromJson(
            json['permissions'] as Map<String, dynamic>),
    json['allow_rebase_merge'] as bool?,
    json['temp_clone_token'] as String?,
    json['allow_squash_merge'] as bool?,
    json['allow_auto_merge'] as bool?,
    json['delete_branch_on_merge'] as bool?,
    json['allow_merge_commit'] as bool?,
    json['subscribers_count'] as int?,
    json['network_count'] as int?,
  );
}

Map<String, dynamic> _$RepoTemplateRepositoryToJson(
        RepoTemplateRepository instance) =>
    <String, dynamic>{
      'id': instance.id,
      'node_id': instance.nodeId,
      'name': instance.name,
      'full_name': instance.fullName,
      'owner': instance.owner?.toJson(),
      'private': instance.private,
      'html_url': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'archive_url': instance.archiveUrl,
      'assignees_url': instance.assigneesUrl,
      'blobs_url': instance.blobsUrl,
      'branches_url': instance.branchesUrl,
      'collaborators_url': instance.collaboratorsUrl,
      'comments_url': instance.commentsUrl,
      'commits_url': instance.commitsUrl,
      'compare_url': instance.compareUrl,
      'contents_url': instance.contentsUrl,
      'contributors_url': instance.contributorsUrl,
      'deployments_url': instance.deploymentsUrl,
      'downloads_url': instance.downloadsUrl,
      'events_url': instance.eventsUrl,
      'forks_url': instance.forksUrl,
      'git_commits_url': instance.gitCommitsUrl,
      'git_refs_url': instance.gitRefsUrl,
      'git_tags_url': instance.gitTagsUrl,
      'git_url': instance.gitUrl,
      'issue_comment_url': instance.issueCommentUrl,
      'issue_events_url': instance.issueEventsUrl,
      'issues_url': instance.issuesUrl,
      'keys_url': instance.keysUrl,
      'labels_url': instance.labelsUrl,
      'languages_url': instance.languagesUrl,
      'merges_url': instance.mergesUrl,
      'milestones_url': instance.milestonesUrl,
      'notifications_url': instance.notificationsUrl,
      'pulls_url': instance.pullsUrl,
      'releases_url': instance.releasesUrl,
      'ssh_url': instance.sshUrl,
      'stargazers_url': instance.stargazersUrl,
      'statuses_url': instance.statusesUrl,
      'subscribers_url': instance.subscribersUrl,
      'subscription_url': instance.subscriptionUrl,
      'tags_url': instance.tagsUrl,
      'teams_url': instance.teamsUrl,
      'trees_url': instance.treesUrl,
      'clone_url': instance.cloneUrl,
      'mirror_url': instance.mirrorUrl,
      'hooks_url': instance.hooksUrl,
      'svn_url': instance.svnUrl,
      'homepage': instance.homepage,
      'language': instance.language,
      'forks': instance.forks,
      'forks_count': instance.forksCount,
      'stargazers_count': instance.stargazersCount,
      'watchers_count': instance.watchersCount,
      'watchers': instance.watchers,
      'size': instance.size,
      'default_branch': instance.defaultBranch,
      'open_issues': instance.openIssues,
      'open_issues_count': instance.openIssuesCount,
      'is_template': instance.isTemplate,
      'license': instance.license?.toJson(),
      'topics': instance.topics,
      'has_issues': instance.hasIssues,
      'has_projects': instance.hasProjects,
      'has_wiki': instance.hasWiki,
      'has_pages': instance.hasPages,
      'has_downloads': instance.hasDownloads,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'visibility': instance.visibility,
      'pushed_at': instance.pushedAt,
      'created_at': instance.createdAt,
      'updated_at': instance.updatedAt,
      'permissions': instance.permissions?.toJson(),
      'allow_rebase_merge': instance.allowRebaseMerge,
      'temp_clone_token': instance.tempCloneToken,
      'allow_squash_merge': instance.allowSquashMerge,
      'allow_auto_merge': instance.allowAutoMerge,
      'delete_branch_on_merge': instance.deleteBranchOnMerge,
      'allow_merge_commit': instance.allowMergeCommit,
      'subscribers_count': instance.subscribersCount,
      'network_count': instance.networkCount,
    };

RepoTemplateRepositoryOwner _$RepoTemplateRepositoryOwnerFromJson(
    Map<String, dynamic> json) {
  return RepoTemplateRepositoryOwner(
    json['login'] as String?,
    json['id'] as int?,
    json['node_id'] as String?,
    json['avatar_url'] as String?,
    json['gravatar_id'] as String?,
    json['url'] as String?,
    json['html_url'] as String?,
    json['followers_url'] as String?,
    json['following_url'] as String?,
    json['gists_url'] as String?,
    json['starred_url'] as String?,
    json['subscriptions_url'] as String?,
    json['organizations_url'] as String?,
    json['repos_url'] as String?,
    json['events_url'] as String?,
    json['received_events_url'] as String?,
    json['type'] as String?,
    json['site_admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoTemplateRepositoryOwnerToJson(
        RepoTemplateRepositoryOwner instance) =>
    <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'node_id': instance.nodeId,
      'avatar_url': instance.avatarUrl,
      'gravatar_id': instance.gravatarId,
      'url': instance.url,
      'html_url': instance.htmlUrl,
      'followers_url': instance.followersUrl,
      'following_url': instance.followingUrl,
      'gists_url': instance.gistsUrl,
      'starred_url': instance.starredUrl,
      'subscriptions_url': instance.subscriptionsUrl,
      'organizations_url': instance.organizationsUrl,
      'repos_url': instance.reposUrl,
      'events_url': instance.eventsUrl,
      'received_events_url': instance.receivedEventsUrl,
      'type': instance.type,
      'site_admin': instance.siteAdmin,
    };

RepoTemplateRepositoryLicense _$RepoTemplateRepositoryLicenseFromJson(
    Map<String, dynamic> json) {
  return RepoTemplateRepositoryLicense(
    json['key'] as String?,
    json['name'] as String?,
    json['url'] as String?,
    json['spdx_id'] as String?,
    json['node_id'] as String?,
    json['html_url'] as String?,
  );
}

Map<String, dynamic> _$RepoTemplateRepositoryLicenseToJson(
        RepoTemplateRepositoryLicense instance) =>
    <String, dynamic>{
      'key': instance.key,
      'name': instance.name,
      'url': instance.url,
      'spdx_id': instance.spdxId,
      'node_id': instance.nodeId,
      'html_url': instance.htmlUrl,
    };

RepoTemplateRepositoryPermissions _$RepoTemplateRepositoryPermissionsFromJson(
    Map<String, dynamic> json) {
  return RepoTemplateRepositoryPermissions(
    json['admin'] as bool?,
    json['push'] as bool?,
    json['pull'] as bool?,
  );
}

Map<String, dynamic> _$RepoTemplateRepositoryPermissionsToJson(
        RepoTemplateRepositoryPermissions instance) =>
    <String, dynamic>{
      'admin': instance.admin,
      'push': instance.push,
      'pull': instance.pull,
    };

RepoLicense _$RepoLicenseFromJson(Map<String, dynamic> json) {
  return RepoLicense(
    json['key'] as String?,
    json['name'] as String?,
    json['spdx_id'] as String?,
    json['url'] as String?,
    json['node_id'] as String?,
  );
}

Map<String, dynamic> _$RepoLicenseToJson(RepoLicense instance) =>
    <String, dynamic>{
      'key': instance.key,
      'name': instance.name,
      'spdx_id': instance.spdxId,
      'url': instance.url,
      'node_id': instance.nodeId,
    };

RepoOrganization _$RepoOrganizationFromJson(Map<String, dynamic> json) {
  return RepoOrganization(
    json['login'] as String?,
    json['id'] as int?,
    json['node_id'] as String?,
    json['avatar_url'] as String?,
    json['gravatar_id'] as String?,
    json['url'] as String?,
    json['html_url'] as String?,
    json['followers_url'] as String?,
    json['following_url'] as String?,
    json['gists_url'] as String?,
    json['starred_url'] as String?,
    json['subscriptions_url'] as String?,
    json['organizations_url'] as String?,
    json['repos_url'] as String?,
    json['events_url'] as String?,
    json['received_events_url'] as String?,
    json['type'] as String?,
    json['site_admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoOrganizationToJson(RepoOrganization instance) =>
    <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'node_id': instance.nodeId,
      'avatar_url': instance.avatarUrl,
      'gravatar_id': instance.gravatarId,
      'url': instance.url,
      'html_url': instance.htmlUrl,
      'followers_url': instance.followersUrl,
      'following_url': instance.followingUrl,
      'gists_url': instance.gistsUrl,
      'starred_url': instance.starredUrl,
      'subscriptions_url': instance.subscriptionsUrl,
      'organizations_url': instance.organizationsUrl,
      'repos_url': instance.reposUrl,
      'events_url': instance.eventsUrl,
      'received_events_url': instance.receivedEventsUrl,
      'type': instance.type,
      'site_admin': instance.siteAdmin,
    };

RepoParent _$RepoParentFromJson(Map<String, dynamic> json) {
  return RepoParent(
    json['id'] as int?,
    json['node_id'] as String?,
    json['name'] as String?,
    json['full_name'] as String?,
    json['owner'] == null
        ? null
        : RepoParentOwner.fromJson(json['owner'] as Map<String, dynamic>),
    json['private'] as bool?,
    json['html_url'] as String?,
    json['description'] as String?,
    json['fork'] as bool?,
    json['url'] as String?,
    json['archive_url'] as String?,
    json['assignees_url'] as String?,
    json['blobs_url'] as String?,
    json['branches_url'] as String?,
    json['collaborators_url'] as String?,
    json['comments_url'] as String?,
    json['commits_url'] as String?,
    json['compare_url'] as String?,
    json['contents_url'] as String?,
    json['contributors_url'] as String?,
    json['deployments_url'] as String?,
    json['downloads_url'] as String?,
    json['events_url'] as String?,
    json['forks_url'] as String?,
    json['git_commits_url'] as String?,
    json['git_refs_url'] as String?,
    json['git_tags_url'] as String?,
    json['git_url'] as String?,
    json['issue_comment_url'] as String?,
    json['issue_events_url'] as String?,
    json['issues_url'] as String?,
    json['keys_url'] as String?,
    json['labels_url'] as String?,
    json['languages_url'] as String?,
    json['merges_url'] as String?,
    json['milestones_url'] as String?,
    json['notifications_url'] as String?,
    json['pulls_url'] as String?,
    json['releases_url'] as String?,
    json['ssh_url'] as String?,
    json['stargazers_url'] as String?,
    json['statuses_url'] as String?,
    json['subscribers_url'] as String?,
    json['subscription_url'] as String?,
    json['tags_url'] as String?,
    json['teams_url'] as String?,
    json['trees_url'] as String?,
    json['clone_url'] as String?,
    json['mirror_url'] as String?,
    json['hooks_url'] as String?,
    json['svn_url'] as String?,
    json['homepage'] as String?,
    json['language'] as String?,
    json['forks_count'] as int?,
    json['stargazers_count'] as int?,
    json['watchers_count'] as int?,
    json['size'] as int?,
    json['default_branch'] as String?,
    json['open_issues_count'] as int?,
    json['is_template'] as bool?,
    (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
    json['has_issues'] as bool?,
    json['has_projects'] as bool?,
    json['has_wiki'] as bool?,
    json['has_pages'] as bool?,
    json['has_downloads'] as bool?,
    json['archived'] as bool?,
    json['disabled'] as bool?,
    json['visibility'] as String?,
    json['pushed_at'] as String?,
    json['created_at'] as String?,
    json['updated_at'] as String?,
    json['permissions'] == null
        ? null
        : RepoParentPermissions.fromJson(
            json['permissions'] as Map<String, dynamic>),
    json['allow_rebase_merge'] as bool?,
    json['temp_clone_token'] as String?,
    json['allow_squash_merge'] as bool?,
    json['allow_auto_merge'] as bool?,
    json['delete_branch_on_merge'] as bool?,
    json['allow_merge_commit'] as bool?,
    json['subscribers_count'] as int?,
    json['network_count'] as int?,
    json['license'] == null
        ? null
        : RepoParentLicense.fromJson(json['license'] as Map<String, dynamic>),
    json['forks'] as int?,
    json['open_issues'] as int?,
    json['watchers'] as int?,
  );
}

Map<String, dynamic> _$RepoParentToJson(RepoParent instance) =>
    <String, dynamic>{
      'id': instance.id,
      'node_id': instance.nodeId,
      'name': instance.name,
      'full_name': instance.fullName,
      'owner': instance.owner?.toJson(),
      'private': instance.private,
      'html_url': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'archive_url': instance.archiveUrl,
      'assignees_url': instance.assigneesUrl,
      'blobs_url': instance.blobsUrl,
      'branches_url': instance.branchesUrl,
      'collaborators_url': instance.collaboratorsUrl,
      'comments_url': instance.commentsUrl,
      'commits_url': instance.commitsUrl,
      'compare_url': instance.compareUrl,
      'contents_url': instance.contentsUrl,
      'contributors_url': instance.contributorsUrl,
      'deployments_url': instance.deploymentsUrl,
      'downloads_url': instance.downloadsUrl,
      'events_url': instance.eventsUrl,
      'forks_url': instance.forksUrl,
      'git_commits_url': instance.gitCommitsUrl,
      'git_refs_url': instance.gitRefsUrl,
      'git_tags_url': instance.gitTagsUrl,
      'git_url': instance.gitUrl,
      'issue_comment_url': instance.issueCommentUrl,
      'issue_events_url': instance.issueEventsUrl,
      'issues_url': instance.issuesUrl,
      'keys_url': instance.keysUrl,
      'labels_url': instance.labelsUrl,
      'languages_url': instance.languagesUrl,
      'merges_url': instance.mergesUrl,
      'milestones_url': instance.milestonesUrl,
      'notifications_url': instance.notificationsUrl,
      'pulls_url': instance.pullsUrl,
      'releases_url': instance.releasesUrl,
      'ssh_url': instance.sshUrl,
      'stargazers_url': instance.stargazersUrl,
      'statuses_url': instance.statusesUrl,
      'subscribers_url': instance.subscribersUrl,
      'subscription_url': instance.subscriptionUrl,
      'tags_url': instance.tagsUrl,
      'teams_url': instance.teamsUrl,
      'trees_url': instance.treesUrl,
      'clone_url': instance.cloneUrl,
      'mirror_url': instance.mirrorUrl,
      'hooks_url': instance.hooksUrl,
      'svn_url': instance.svnUrl,
      'homepage': instance.homepage,
      'language': instance.language,
      'forks_count': instance.forksCount,
      'stargazers_count': instance.stargazersCount,
      'watchers_count': instance.watchersCount,
      'size': instance.size,
      'default_branch': instance.defaultBranch,
      'open_issues_count': instance.openIssuesCount,
      'is_template': instance.isTemplate,
      'topics': instance.topics,
      'has_issues': instance.hasIssues,
      'has_projects': instance.hasProjects,
      'has_wiki': instance.hasWiki,
      'has_pages': instance.hasPages,
      'has_downloads': instance.hasDownloads,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'visibility': instance.visibility,
      'pushed_at': instance.pushedAt,
      'created_at': instance.createdAt,
      'updated_at': instance.updatedAt,
      'permissions': instance.permissions?.toJson(),
      'allow_rebase_merge': instance.allowRebaseMerge,
      'temp_clone_token': instance.tempCloneToken,
      'allow_squash_merge': instance.allowSquashMerge,
      'allow_auto_merge': instance.allowAutoMerge,
      'delete_branch_on_merge': instance.deleteBranchOnMerge,
      'allow_merge_commit': instance.allowMergeCommit,
      'subscribers_count': instance.subscribersCount,
      'network_count': instance.networkCount,
      'license': instance.license?.toJson(),
      'forks': instance.forks,
      'open_issues': instance.openIssues,
      'watchers': instance.watchers,
    };

RepoParentOwner _$RepoParentOwnerFromJson(Map<String, dynamic> json) {
  return RepoParentOwner(
    json['login'] as String?,
    json['id'] as int?,
    json['node_id'] as String?,
    json['avatar_url'] as String?,
    json['gravatar_id'] as String?,
    json['url'] as String?,
    json['html_url'] as String?,
    json['followers_url'] as String?,
    json['following_url'] as String?,
    json['gists_url'] as String?,
    json['starred_url'] as String?,
    json['subscriptions_url'] as String?,
    json['organizations_url'] as String?,
    json['repos_url'] as String?,
    json['events_url'] as String?,
    json['received_events_url'] as String?,
    json['type'] as String?,
    json['site_admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoParentOwnerToJson(RepoParentOwner instance) =>
    <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'node_id': instance.nodeId,
      'avatar_url': instance.avatarUrl,
      'gravatar_id': instance.gravatarId,
      'url': instance.url,
      'html_url': instance.htmlUrl,
      'followers_url': instance.followersUrl,
      'following_url': instance.followingUrl,
      'gists_url': instance.gistsUrl,
      'starred_url': instance.starredUrl,
      'subscriptions_url': instance.subscriptionsUrl,
      'organizations_url': instance.organizationsUrl,
      'repos_url': instance.reposUrl,
      'events_url': instance.eventsUrl,
      'received_events_url': instance.receivedEventsUrl,
      'type': instance.type,
      'site_admin': instance.siteAdmin,
    };

RepoParentPermissions _$RepoParentPermissionsFromJson(
    Map<String, dynamic> json) {
  return RepoParentPermissions(
    json['admin'] as bool?,
    json['push'] as bool?,
    json['pull'] as bool?,
  );
}

Map<String, dynamic> _$RepoParentPermissionsToJson(
        RepoParentPermissions instance) =>
    <String, dynamic>{
      'admin': instance.admin,
      'push': instance.push,
      'pull': instance.pull,
    };

RepoParentLicense _$RepoParentLicenseFromJson(Map<String, dynamic> json) {
  return RepoParentLicense(
    json['key'] as String?,
    json['name'] as String?,
    json['url'] as String?,
    json['spdx_id'] as String?,
    json['node_id'] as String?,
    json['html_url'] as String?,
  );
}

Map<String, dynamic> _$RepoParentLicenseToJson(RepoParentLicense instance) =>
    <String, dynamic>{
      'key': instance.key,
      'name': instance.name,
      'url': instance.url,
      'spdx_id': instance.spdxId,
      'node_id': instance.nodeId,
      'html_url': instance.htmlUrl,
    };

RepoSource _$RepoSourceFromJson(Map<String, dynamic> json) {
  return RepoSource(
    json['id'] as int?,
    json['node_id'] as String?,
    json['name'] as String?,
    json['full_name'] as String?,
    json['owner'] == null
        ? null
        : RepoSourceOwner.fromJson(json['owner'] as Map<String, dynamic>),
    json['private'] as bool?,
    json['html_url'] as String?,
    json['description'] as String?,
    json['fork'] as bool?,
    json['url'] as String?,
    json['archive_url'] as String?,
    json['assignees_url'] as String?,
    json['blobs_url'] as String?,
    json['branches_url'] as String?,
    json['collaborators_url'] as String?,
    json['comments_url'] as String?,
    json['commits_url'] as String?,
    json['compare_url'] as String?,
    json['contents_url'] as String?,
    json['contributors_url'] as String?,
    json['deployments_url'] as String?,
    json['downloads_url'] as String?,
    json['events_url'] as String?,
    json['forks_url'] as String?,
    json['git_commits_url'] as String?,
    json['git_refs_url'] as String?,
    json['git_tags_url'] as String?,
    json['git_url'] as String?,
    json['issue_comment_url'] as String?,
    json['issue_events_url'] as String?,
    json['issues_url'] as String?,
    json['keys_url'] as String?,
    json['labels_url'] as String?,
    json['languages_url'] as String?,
    json['merges_url'] as String?,
    json['milestones_url'] as String?,
    json['notifications_url'] as String?,
    json['pulls_url'] as String?,
    json['releases_url'] as String?,
    json['ssh_url'] as String?,
    json['stargazers_url'] as String?,
    json['statuses_url'] as String?,
    json['subscribers_url'] as String?,
    json['subscription_url'] as String?,
    json['tags_url'] as String?,
    json['teams_url'] as String?,
    json['trees_url'] as String?,
    json['clone_url'] as String?,
    json['mirror_url'] as String?,
    json['hooks_url'] as String?,
    json['svn_url'] as String?,
    json['homepage'] as String?,
    json['language'] as String?,
    json['forks_count'] as int?,
    json['stargazers_count'] as int?,
    json['watchers_count'] as int?,
    json['size'] as int?,
    json['default_branch'] as String?,
    json['open_issues_count'] as int?,
    json['is_template'] as bool?,
    (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
    json['has_issues'] as bool?,
    json['has_projects'] as bool?,
    json['has_wiki'] as bool?,
    json['has_pages'] as bool?,
    json['has_downloads'] as bool?,
    json['archived'] as bool?,
    json['disabled'] as bool?,
    json['visibility'] as String?,
    json['pushed_at'] as String?,
    json['created_at'] as String?,
    json['updated_at'] as String?,
    json['permissions'] == null
        ? null
        : RepoSourcePermissions.fromJson(
            json['permissions'] as Map<String, dynamic>),
    json['allow_rebase_merge'] as bool?,
    json['temp_clone_token'] as String?,
    json['allow_squash_merge'] as bool?,
    json['allow_auto_merge'] as bool?,
    json['delete_branch_on_merge'] as bool?,
    json['allow_merge_commit'] as bool?,
    json['subscribers_count'] as int?,
    json['network_count'] as int?,
    json['license'] == null
        ? null
        : RepoSourceLicense.fromJson(json['license'] as Map<String, dynamic>),
    json['forks'] as int?,
    json['open_issues'] as int?,
    json['watchers'] as int?,
  );
}

Map<String, dynamic> _$RepoSourceToJson(RepoSource instance) =>
    <String, dynamic>{
      'id': instance.id,
      'node_id': instance.nodeId,
      'name': instance.name,
      'full_name': instance.fullName,
      'owner': instance.owner?.toJson(),
      'private': instance.private,
      'html_url': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'archive_url': instance.archiveUrl,
      'assignees_url': instance.assigneesUrl,
      'blobs_url': instance.blobsUrl,
      'branches_url': instance.branchesUrl,
      'collaborators_url': instance.collaboratorsUrl,
      'comments_url': instance.commentsUrl,
      'commits_url': instance.commitsUrl,
      'compare_url': instance.compareUrl,
      'contents_url': instance.contentsUrl,
      'contributors_url': instance.contributorsUrl,
      'deployments_url': instance.deploymentsUrl,
      'downloads_url': instance.downloadsUrl,
      'events_url': instance.eventsUrl,
      'forks_url': instance.forksUrl,
      'git_commits_url': instance.gitCommitsUrl,
      'git_refs_url': instance.gitRefsUrl,
      'git_tags_url': instance.gitTagsUrl,
      'git_url': instance.gitUrl,
      'issue_comment_url': instance.issueCommentUrl,
      'issue_events_url': instance.issueEventsUrl,
      'issues_url': instance.issuesUrl,
      'keys_url': instance.keysUrl,
      'labels_url': instance.labelsUrl,
      'languages_url': instance.languagesUrl,
      'merges_url': instance.mergesUrl,
      'milestones_url': instance.milestonesUrl,
      'notifications_url': instance.notificationsUrl,
      'pulls_url': instance.pullsUrl,
      'releases_url': instance.releasesUrl,
      'ssh_url': instance.sshUrl,
      'stargazers_url': instance.stargazersUrl,
      'statuses_url': instance.statusesUrl,
      'subscribers_url': instance.subscribersUrl,
      'subscription_url': instance.subscriptionUrl,
      'tags_url': instance.tagsUrl,
      'teams_url': instance.teamsUrl,
      'trees_url': instance.treesUrl,
      'clone_url': instance.cloneUrl,
      'mirror_url': instance.mirrorUrl,
      'hooks_url': instance.hooksUrl,
      'svn_url': instance.svnUrl,
      'homepage': instance.homepage,
      'language': instance.language,
      'forks_count': instance.forksCount,
      'stargazers_count': instance.stargazersCount,
      'watchers_count': instance.watchersCount,
      'size': instance.size,
      'default_branch': instance.defaultBranch,
      'open_issues_count': instance.openIssuesCount,
      'is_template': instance.isTemplate,
      'topics': instance.topics,
      'has_issues': instance.hasIssues,
      'has_projects': instance.hasProjects,
      'has_wiki': instance.hasWiki,
      'has_pages': instance.hasPages,
      'has_downloads': instance.hasDownloads,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'visibility': instance.visibility,
      'pushed_at': instance.pushedAt,
      'created_at': instance.createdAt,
      'updated_at': instance.updatedAt,
      'permissions': instance.permissions?.toJson(),
      'allow_rebase_merge': instance.allowRebaseMerge,
      'temp_clone_token': instance.tempCloneToken,
      'allow_squash_merge': instance.allowSquashMerge,
      'allow_auto_merge': instance.allowAutoMerge,
      'delete_branch_on_merge': instance.deleteBranchOnMerge,
      'allow_merge_commit': instance.allowMergeCommit,
      'subscribers_count': instance.subscribersCount,
      'network_count': instance.networkCount,
      'license': instance.license?.toJson(),
      'forks': instance.forks,
      'open_issues': instance.openIssues,
      'watchers': instance.watchers,
    };

RepoSourceOwner _$RepoSourceOwnerFromJson(Map<String, dynamic> json) {
  return RepoSourceOwner(
    json['login'] as String?,
    json['id'] as int?,
    json['node_id'] as String?,
    json['avatar_url'] as String?,
    json['gravatar_id'] as String?,
    json['url'] as String?,
    json['html_url'] as String?,
    json['followers_url'] as String?,
    json['following_url'] as String?,
    json['gists_url'] as String?,
    json['starred_url'] as String?,
    json['subscriptions_url'] as String?,
    json['organizations_url'] as String?,
    json['repos_url'] as String?,
    json['events_url'] as String?,
    json['received_events_url'] as String?,
    json['type'] as String?,
    json['site_admin'] as bool?,
  );
}

Map<String, dynamic> _$RepoSourceOwnerToJson(RepoSourceOwner instance) =>
    <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'node_id': instance.nodeId,
      'avatar_url': instance.avatarUrl,
      'gravatar_id': instance.gravatarId,
      'url': instance.url,
      'html_url': instance.htmlUrl,
      'followers_url': instance.followersUrl,
      'following_url': instance.followingUrl,
      'gists_url': instance.gistsUrl,
      'starred_url': instance.starredUrl,
      'subscriptions_url': instance.subscriptionsUrl,
      'organizations_url': instance.organizationsUrl,
      'repos_url': instance.reposUrl,
      'events_url': instance.eventsUrl,
      'received_events_url': instance.receivedEventsUrl,
      'type': instance.type,
      'site_admin': instance.siteAdmin,
    };

RepoSourcePermissions _$RepoSourcePermissionsFromJson(
    Map<String, dynamic> json) {
  return RepoSourcePermissions(
    json['admin'] as bool?,
    json['push'] as bool?,
    json['pull'] as bool?,
  );
}

Map<String, dynamic> _$RepoSourcePermissionsToJson(
        RepoSourcePermissions instance) =>
    <String, dynamic>{
      'admin': instance.admin,
      'push': instance.push,
      'pull': instance.pull,
    };

RepoSourceLicense _$RepoSourceLicenseFromJson(Map<String, dynamic> json) {
  return RepoSourceLicense(
    json['key'] as String?,
    json['name'] as String?,
    json['url'] as String?,
    json['spdx_id'] as String?,
    json['node_id'] as String?,
    json['html_url'] as String?,
  );
}

Map<String, dynamic> _$RepoSourceLicenseToJson(RepoSourceLicense instance) =>
    <String, dynamic>{
      'key': instance.key,
      'name': instance.name,
      'url': instance.url,
      'spdx_id': instance.spdxId,
      'node_id': instance.nodeId,
      'html_url': instance.htmlUrl,
    };
